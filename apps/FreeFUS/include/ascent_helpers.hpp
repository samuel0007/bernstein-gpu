#pragma once

#include <ascent.hpp>
#include <conduit_blueprint.hpp>
#include <dolfinx.h>
#include <stdexcept>
#include <unordered_map>
#include <vector>

namespace ascent_h {

using namespace ascent;
using namespace conduit;
using namespace dolfinx;

static const std::unordered_map<mesh::CellType, std::string>
    dolfinx_celltype_to_blueprint = {{mesh::CellType::point, "point"},
                                     {mesh::CellType::interval, "line"},
                                     {mesh::CellType::triangle, "tri"},
                                     {mesh::CellType::quadrilateral, "quad"},
                                     {mesh::CellType::tetrahedron, "tet"},
                                     {mesh::CellType::hexahedron, "hex"},
                                     {mesh::CellType::prism, "prism"},
                                     {mesh::CellType::pyramid, "pyramid"}};

/// @brief Mesh the reference triangle assuming a lagrangian space structure
/// @param P
/// @return dof connectivity
std::vector<int> MeshRefTriangle(const int P) {
  switch (P) {
  case 1:
    return {0, 1, 2};
  case 2:
    return {0, 5, 4, 5, 1, 3, 3, 4, 5, 4, 3, 2};
  case 3:
    return {0, 7, 5, 7, 8, 9, 8, 1, 3, 9, 5, 7, 3, 9,
            8, 5, 9, 6, 9, 3, 4, 4, 6, 9, 6, 4, 2};
  case 4:
    return {3,  11, 1,  4,  5,  14, 8,  5,  2, 4,  13, 3, 6,  12, 7,  7,
            12, 14, 9,  12, 0,  12, 6,  0,  5, 8,  7,  5, 7,  14, 11, 13,
            10, 13, 11, 3,  12, 13, 14, 13, 4, 14, 13, 9, 10, 13, 12, 9};
  case 5:
    return {17, 3,  4,  3,  14, 1,  6,  20, 5,  10, 6,  2,  5,  19, 4,
            14, 17, 13, 17, 14, 3,  13, 16, 12, 17, 16, 13, 18, 9,  8,
            9,  18, 20, 10, 9,  20, 10, 20, 6,  15, 11, 12, 16, 15, 12,
            15, 7,  0,  11, 15, 0,  7,  15, 8,  15, 18, 8,  15, 19, 18,
            19, 15, 16, 19, 16, 17, 19, 17, 4,  18, 19, 20, 20, 19, 5};
  default:
    throw std::invalid_argument("MeshRefTriangle: unsupported P = " +
                                std::to_string(P));
  }
}


std::vector<int> MeshRefTetrahedron(const int P) {
  switch (P) {
  case 1:
    return {0, 1, 2, 3};
  case 2:
    return {8, 6, 4, 2, 7, 5, 4, 3, 9, 5, 6, 1, 9, 8, 4, 0,
            9, 5, 6, 4, 9, 8, 6, 4, 9, 7, 5, 4, 9, 7, 4, 0};
  case 3:
    return {13, 9,  4,  2, 11, 5,  7,  3,  15, 6,  8,  1,  18, 16, 6,  7,
            19, 16, 9,  8, 17, 16, 5,  4,  19, 15, 14, 6,  19, 16, 6,  8,
            19, 15, 6,  8, 19, 18, 16, 6,  19, 18, 16, 14, 19, 18, 14, 6,
            17, 13, 12, 9, 17, 16, 9,  4,  17, 13, 9,  4,  17, 19, 16, 9,
            17, 19, 12, 9, 17, 16, 5,  7,  17, 11, 5,  7,  17, 18, 11, 7,
            17, 18, 16, 7, 17, 10, 18, 11, 17, 14, 12, 0,  17, 18, 16, 14,
            17, 18, 14, 0, 17, 19, 16, 14, 17, 19, 14, 12, 17, 10, 18, 0};
  case 4:
    return {18, 12, 4,  2,  21, 7,  10, 1,  32, 22, 10, 11, 23, 5,  26, 4,  23,
            33, 12, 11, 15, 6,  9,  3,  29, 22, 7,  8,  24, 23, 34, 22, 24, 27,
            6,  5,  24, 30, 9,  8,  23, 26, 17, 4,  23, 18, 12, 17, 23, 18, 12,
            4,  23, 18, 17, 4,  23, 33, 12, 17, 23, 33, 26, 17, 29, 21, 7,  20,
            29, 21, 10, 20, 29, 22, 7,  10, 29, 21, 7,  10, 29, 32, 22, 20, 29,
            32, 22, 10, 29, 32, 10, 20, 31, 32, 33, 11, 31, 32, 22, 11, 31, 23,
            33, 11, 31, 23, 34, 33, 31, 23, 34, 22, 31, 23, 22, 11, 31, 32, 22,
            20, 31, 29, 22, 20, 31, 28, 34, 22, 31, 19, 28, 20, 31, 19, 28, 34,
            31, 19, 32, 20, 31, 29, 28, 22, 31, 29, 28, 20, 16, 19, 28, 0,  16,
            19, 28, 34, 16, 28, 25, 34, 16, 13, 28, 25, 16, 13, 28, 0,  16, 31,
            19, 34, 16, 33, 26, 17, 16, 25, 34, 26, 16, 23, 34, 26, 16, 23, 33,
            26, 16, 23, 34, 33, 16, 31, 34, 33, 24, 29, 22, 8,  24, 28, 34, 22,
            24, 29, 28, 22, 24, 29, 28, 8,  24, 30, 28, 8,  24, 23, 5,  26, 24,
            25, 5,  26, 24, 25, 34, 26, 24, 23, 34, 26, 24, 27, 25, 5,  24, 15,
            9,  14, 24, 15, 6,  14, 24, 15, 6,  9,  24, 27, 6,  14, 24, 30, 9,
            14, 24, 28, 25, 34, 24, 27, 25, 14, 24, 13, 28, 25, 24, 13, 25, 14,
            24, 13, 28, 14, 24, 30, 28, 14};
  case 5:
    return {10, 9, 44, 31, 42, 8, 28, 9, 15, 23, 4, 2, 19, 7, 11, 3, 27, 12, 8, 1, 48, 12, 28, 13, 39, 33, 7, 6, 45, 33, 11, 10, 55, 33, 32, 31, 36, 5, 30, 4, 38, 5, 32, 6, 51, 14, 15, 30, 29, 53, 28, 31, 54, 29, 32, 30, 50, 29, 14, 13, 48, 42, 8, 26, 48, 27, 12, 26, 48, 42, 28, 26, 48, 42, 8, 28, 48, 12, 8, 28, 48, 27, 12, 8, 48, 27, 8, 26, 45, 19, 7, 18, 45, 19, 11, 18, 45, 33, 7, 11, 45, 19, 7, 11, 45, 39, 33, 18, 45, 39, 33, 7, 45, 39, 7, 18, 55, 17, 18, 37, 55, 17, 43, 18, 55, 39, 33, 37, 55, 45, 33, 18, 55, 39, 33, 18, 55, 39, 18, 37, 55, 45, 43, 18, 55, 43, 10, 44, 55, 43, 44, 31, 55, 33, 10, 31, 55, 10, 44, 31, 55, 45, 33, 10, 55, 45, 43, 10, 55, 17, 34, 37, 55, 16, 17, 34, 55, 52, 34, 37, 55, 16, 17, 43, 55, 52, 16, 34, 55, 40, 52, 43, 55, 40, 52, 16, 55, 40, 16, 43, 38, 39, 33, 6, 38, 33, 32, 6, 38, 39, 33, 37, 38, 55, 32, 37, 38, 55, 33, 32, 38, 55, 33, 37, 24, 16, 34, 0, 24, 20, 46, 0, 24, 20, 46, 34, 24, 20, 34, 0, 24, 52, 16, 34, 24, 52, 46, 34, 24, 40, 52, 16, 24, 40, 52, 46, 24, 40, 16, 0, 51, 23, 22, 4, 51, 15, 23, 4, 51, 36, 30, 4, 51, 15, 30, 4, 51, 15, 23, 22, 51, 36, 30, 22, 51, 36, 22, 4, 41, 28, 9, 31, 41, 9, 44, 31, 41, 42, 28, 9, 41, 53, 28, 31, 41, 42, 28, 26, 41, 25, 47, 26, 41, 48, 47, 28, 41, 48, 47, 26, 41, 48, 28, 26, 41, 53, 47, 28, 41, 43, 44, 31, 41, 40, 52, 43, 41, 55, 52, 43, 41, 55, 43, 31, 41, 55, 52, 31, 41, 53, 52, 31, 41, 25, 47, 46, 41, 52, 47, 46, 41, 40, 52, 46, 41, 24, 40, 46, 41, 24, 25, 46, 41, 53, 52, 47, 54, 35, 34, 37, 54, 52, 34, 37, 54, 55, 52, 37, 54, 38, 32, 37, 54, 55, 32, 37, 54, 38, 35, 37, 54, 49, 21, 22, 54, 35, 21, 22, 54, 36, 35, 22, 54, 51, 49, 22, 54, 36, 30, 22, 54, 51, 49, 30, 54, 51, 30, 22, 54, 5, 32, 30, 54, 36, 5, 30, 54, 36, 5, 35, 54, 38, 5, 32, 54, 38, 5, 35, 54, 20, 46, 34, 54, 20, 21, 34, 54, 20, 21, 46, 54, 35, 21, 34, 54, 52, 46, 34, 54, 49, 52, 46, 54, 49, 21, 46, 54, 55, 52, 31, 54, 53, 52, 31, 54, 55, 32, 31, 54, 29, 53, 31, 54, 29, 53, 52, 54, 29, 32, 31, 50, 48, 47, 28, 50, 53, 47, 28, 50, 48, 28, 13, 50, 29, 53, 28, 50, 29, 28, 13, 50, 51, 49, 30, 50, 29, 14, 30, 50, 51, 14, 30, 50, 54, 29, 30, 50, 54, 49, 30, 50, 52, 47, 46, 50, 49, 52, 46, 50, 53, 52, 47, 50, 29, 53, 52, 50, 54, 29, 52, 50, 54, 49, 52};
  case 6:
    return {62, 12, 11, 41, 28, 18, 4, 2, 33, 9, 14, 1, 67, 15, 14, 34, 10, 57, 9, 34, 60, 10, 38, 11, 42, 7, 6, 52, 42, 43, 83, 41, 63, 13, 43, 12, 23, 8, 13, 3, 53, 8, 43, 7, 35, 70, 15, 16, 35, 76, 38, 34, 37, 5, 47, 4, 37, 73, 18, 17, 40, 50, 5, 6, 36, 72, 17, 16, 39, 81, 38, 41, 39, 82, 40, 42, 39, 78, 36, 35, 79, 36, 40, 37, 67, 9, 14, 34, 67, 33, 9, 14, 67, 57, 9, 34, 67, 33, 32, 9, 67, 33, 32, 14, 67, 57, 32, 34, 67, 57, 32, 9, 76, 57, 32, 31, 76, 66, 32, 31, 76, 57, 32, 34, 76, 67, 66, 34, 76, 67, 66, 32, 76, 67, 32, 34, 76, 56, 57, 31, 76, 56, 57, 34, 76, 56, 66, 31, 60, 56, 57, 34, 60, 10, 38, 34, 60, 10, 57, 34, 60, 76, 56, 34, 60, 10, 56, 57, 60, 76, 56, 38, 60, 76, 38, 34, 19, 24, 44, 0, 19, 74, 54, 64, 19, 29, 54, 0, 19, 29, 54, 64, 19, 29, 64, 0, 19, 24, 44, 64, 19, 24, 64, 0, 19, 74, 44, 64, 19, 74, 44, 54, 63, 62, 61, 12, 63, 62, 61, 41, 63, 43, 83, 41, 63, 62, 12, 41, 63, 83, 61, 41, 63, 43, 83, 61, 63, 43, 12, 41, 80, 83, 61, 21, 80, 51, 48, 21, 80, 51, 83, 21, 80, 51, 83, 48, 80, 20, 48, 21, 80, 20, 61, 21, 80, 58, 20, 61, 80, 58, 83, 61, 80, 20, 44, 48, 80, 74, 44, 48, 80, 74, 44, 54, 80, 19, 20, 54, 80, 19, 44, 54, 80, 19, 20, 44, 80, 58, 20, 54, 80, 58, 74, 54, 53, 83, 61, 21, 53, 22, 61, 21, 53, 22, 51, 21, 53, 51, 83, 21, 53, 63, 43, 61, 53, 43, 83, 61, 53, 63, 22, 61, 53, 51, 7, 52, 53, 51, 83, 52, 53, 42, 83, 52, 53, 42, 43, 7, 53, 42, 43, 83, 53, 42, 7, 52, 53, 23, 8, 22, 53, 8, 13, 43, 53, 63, 13, 43, 53, 63, 13, 22, 53, 23, 8, 13, 53, 23, 13, 22, 81, 38, 11, 41, 81, 60, 59, 11, 81, 62, 11, 41, 81, 59, 62, 11, 81, 60, 59, 38, 81, 60, 38, 11, 81, 83, 61, 41, 81, 59, 62, 61, 81, 62, 61, 41, 81, 58, 83, 61, 81, 58, 59, 61, 81, 80, 58, 83, 81, 80, 58, 59, 81, 80, 83, 41, 35, 67, 66, 34, 35, 67, 66, 15, 35, 70, 66, 15, 35, 67, 15, 34, 35, 76, 70, 66, 35, 76, 66, 34, 37, 47, 27, 4, 37, 28, 18, 27, 37, 28, 18, 4, 37, 28, 27, 4, 37, 73, 18, 27, 37, 73, 47, 27, 75, 29, 54, 64, 75, 74, 65, 64, 75, 65, 29, 64, 75, 74, 54, 64, 75, 30, 29, 54, 75, 30, 65, 29, 75, 55, 30, 54, 75, 65, 66, 31, 75, 56, 66, 31, 75, 76, 65, 66, 75, 76, 56, 66, 75, 30, 56, 31, 75, 30, 65, 31, 75, 55, 30, 56, 75, 58, 59, 54, 75, 58, 74, 54, 75, 55, 59, 54, 75, 80, 58, 74, 75, 80, 58, 59, 75, 81, 80, 59, 75, 81, 80, 74, 75, 60, 56, 59, 75, 76, 56, 38, 75, 60, 56, 38, 75, 60, 59, 38, 75, 55, 56, 59, 75, 81, 76, 38, 75, 81, 59, 38, 82, 51, 83, 52, 82, 51, 48, 52, 82, 51, 83, 48, 82, 42, 83, 52, 82, 80, 42, 83, 82, 80, 83, 48, 82, 49, 48, 52, 82, 49, 80, 48, 82, 50, 6, 52, 82, 42, 6, 52, 82, 40, 42, 6, 82, 49, 50, 52, 82, 40, 49, 50, 82, 40, 50, 6, 78, 70, 65, 66, 78, 76, 70, 66, 78, 76, 65, 66, 78, 35, 76, 70, 78, 75, 35, 76, 78, 75, 76, 65, 78, 69, 75, 65, 78, 69, 70, 65, 78, 69, 70, 16, 78, 36, 72, 16, 78, 35, 70, 16, 78, 72, 69, 16, 78, 36, 72, 69, 78, 36, 35, 16, 39, 80, 83, 41, 39, 80, 42, 83, 39, 42, 83, 41, 39, 81, 80, 41, 39, 82, 81, 80, 39, 82, 80, 42, 39, 81, 76, 38, 39, 75, 35, 76, 39, 35, 76, 38, 39, 75, 81, 76, 39, 78, 75, 81, 39, 78, 75, 35, 77, 24, 44, 64, 77, 24, 25, 64, 77, 24, 44, 25, 77, 74, 44, 64, 77, 68, 25, 64, 77, 45, 68, 25, 77, 45, 44, 25, 77, 80, 74, 48, 77, 49, 80, 48, 77, 49, 44, 48, 77, 74, 44, 48, 77, 45, 49, 44, 77, 82, 49, 80, 77, 82, 45, 49, 77, 75, 81, 74, 77, 82, 81, 80, 77, 81, 80, 74, 77, 39, 78, 81, 77, 78, 75, 81, 77, 39, 78, 82, 77, 39, 82, 81, 77, 74, 65, 64, 77, 68, 65, 64, 77, 75, 74, 65, 77, 69, 75, 65, 77, 69, 68, 65, 77, 78, 69, 75, 77, 78, 69, 68, 79, 47, 27, 26, 79, 73, 27, 26, 79, 73, 47, 27, 79, 71, 73, 26, 79, 37, 73, 47, 79, 46, 47, 26, 79, 50, 5, 47, 79, 37, 5, 47, 79, 46, 50, 47, 79, 40, 50, 5, 79, 40, 37, 5, 79, 71, 73, 17, 79, 72, 71, 17, 79, 37, 73, 17, 79, 36, 72, 17, 79, 36, 37, 17, 79, 72, 69, 71, 79, 36, 72, 69, 79, 69, 68, 71, 79, 78, 36, 69, 79, 78, 69, 68, 79, 77, 78, 68, 79, 39, 78, 82, 79, 39, 82, 40, 79, 39, 78, 36, 79, 39, 36, 40, 79, 77, 78, 82, 79, 71, 25, 26, 79, 46, 25, 26, 79, 68, 71, 25, 79, 45, 68, 25, 79, 45, 46, 25, 79, 77, 45, 68, 79, 45, 46, 49, 79, 40, 49, 50, 79, 46, 49, 50, 79, 82, 45, 49, 79, 82, 40, 49, 79, 77, 82, 45};
  case 7:
    return {33, 21, 4, 2, 16, 17, 89, 40, 10, 74, 11, 40, 81, 12, 13, 49, 14, 15, 84, 54, 68, 8, 53, 7, 9, 8, 69, 54, 5, 59, 44, 4, 5, 63, 48, 6, 39, 10, 16, 1, 51, 66, 6, 7, 51, 118, 53, 50, 27, 9, 15, 3, 47, 51, 115, 48, 20, 99, 44, 21, 45, 41, 103, 40, 45, 78, 12, 11, 45, 112, 46, 49, 114, 47, 46, 50, 83, 52, 14, 13, 42, 96, 19, 18, 42, 41, 46, 106, 119, 52, 53, 54, 93, 41, 17, 18, 43, 20, 98, 19, 43, 109, 48, 44, 43, 42, 108, 47, 117, 52, 50, 49, 99, 33, 32, 4, 99, 33, 32, 21, 99, 33, 21, 4, 99, 59, 44, 4, 99, 44, 21, 4, 99, 59, 44, 32, 99, 59, 32, 4, 39, 38, 74, 89, 39, 38, 16, 89, 39, 74, 89, 40, 39, 16, 89, 40, 39, 10, 74, 40, 39, 10, 38, 74, 39, 10, 16, 40, 51, 66, 7, 65, 51, 118, 66, 65, 51, 118, 53, 65, 51, 68, 53, 7, 51, 68, 7, 65, 51, 68, 53, 65, 45, 102, 103, 106, 45, 41, 46, 106, 45, 102, 46, 106, 45, 41, 103, 106, 45, 112, 102, 103, 45, 112, 102, 46, 45, 81, 12, 77, 45, 81, 77, 49, 45, 78, 12, 77, 45, 81, 12, 49, 45, 112, 78, 77, 45, 112, 77, 49, 73, 103, 74, 40, 73, 78, 74, 11, 73, 74, 11, 40, 73, 45, 103, 40, 73, 45, 78, 11, 73, 45, 11, 40, 73, 112, 102, 103, 73, 112, 102, 77, 73, 112, 78, 77, 73, 72, 102, 103, 73, 72, 78, 77, 73, 72, 102, 77, 73, 45, 112, 78, 73, 45, 112, 103, 114, 113, 115, 118, 114, 51, 118, 50, 114, 51, 115, 118, 114, 113, 118, 50, 114, 47, 51, 115, 114, 47, 51, 50, 114, 47, 113, 115, 26, 69, 84, 54, 26, 15, 84, 54, 26, 9, 15, 54, 26, 9, 69, 54, 26, 27, 9, 69, 26, 27, 9, 15, 26, 27, 15, 84, 109, 5, 63, 59, 109, 5, 59, 44, 109, 5, 63, 48, 109, 5, 48, 44, 109, 58, 63, 59, 109, 58, 63, 48, 109, 107, 30, 94, 109, 97, 30, 94, 109, 97, 107, 94, 109, 57, 58, 107, 109, 31, 97, 30, 109, 58, 31, 30, 109, 57, 107, 30, 109, 57, 58, 30, 109, 59, 44, 32, 109, 99, 97, 32, 109, 99, 97, 44, 109, 99, 44, 32, 109, 31, 97, 32, 109, 31, 59, 32, 109, 58, 31, 59, 88, 74, 89, 40, 88, 38, 74, 89, 88, 103, 89, 40, 88, 103, 74, 40, 88, 37, 38, 89, 88, 37, 38, 74, 88, 73, 37, 74, 88, 73, 103, 74, 88, 72, 102, 103, 88, 72, 102, 36, 88, 87, 102, 103, 88, 72, 37, 36, 88, 87, 37, 36, 88, 73, 72, 37, 88, 87, 102, 36, 88, 73, 72, 103, 42, 105, 46, 106, 42, 114, 47, 46, 42, 114, 105, 46, 42, 114, 47, 105, 42, 108, 47, 105, 42, 96, 91, 95, 42, 105, 91, 106, 42, 105, 91, 95, 42, 92, 96, 106, 42, 92, 96, 91, 42, 92, 91, 106, 42, 108, 105, 95, 42, 108, 96, 95, 62, 63, 66, 6, 62, 63, 48, 6, 62, 51, 66, 6, 62, 51, 115, 66, 62, 51, 115, 48, 62, 51, 48, 6, 62, 58, 63, 48, 62, 115, 48, 107, 62, 109, 48, 107, 62, 57, 58, 63, 62, 57, 58, 107, 62, 57, 115, 107, 62, 109, 58, 107, 62, 109, 58, 48, 104, 113, 115, 107, 104, 47, 113, 115, 104, 47, 115, 107, 104, 114, 47, 113, 104, 114, 47, 105, 104, 114, 113, 105, 104, 108, 47, 107, 104, 108, 47, 105, 104, 91, 95, 94, 104, 90, 107, 94, 104, 95, 107, 94, 104, 105, 91, 95, 104, 108, 95, 107, 104, 90, 105, 91, 104, 90, 91, 94, 104, 108, 105, 95, 119, 8, 53, 54, 119, 8, 69, 54, 119, 68, 8, 69, 119, 68, 8, 53, 119, 67, 68, 69, 119, 67, 69, 54, 119, 118, 53, 65, 119, 116, 118, 65, 119, 116, 118, 53, 119, 68, 53, 65, 119, 64, 116, 65, 119, 64, 68, 65, 119, 67, 64, 68, 119, 67, 64, 116, 93, 92, 96, 106, 93, 42, 96, 106, 93, 42, 41, 18, 93, 42, 41, 106, 93, 42, 96, 18, 93, 102, 103, 106, 93, 92, 102, 106, 93, 41, 103, 106, 93, 87, 92, 102, 93, 87, 102, 103, 93, 88, 87, 103, 93, 103, 89, 40, 93, 17, 89, 40, 93, 41, 17, 40, 93, 41, 103, 40, 93, 88, 103, 89, 43, 98, 19, 95, 43, 108, 96, 95, 43, 96, 19, 95, 43, 42, 108, 96, 43, 42, 96, 19, 43, 99, 97, 44, 43, 98, 99, 97, 43, 20, 99, 44, 43, 20, 98, 99, 43, 109, 97, 44, 43, 47, 115, 107, 43, 115, 48, 107, 43, 108, 47, 107, 43, 47, 115, 48, 43, 109, 48, 107, 43, 97, 95, 94, 43, 95, 107, 94, 43, 98, 97, 95, 43, 97, 107, 94, 43, 108, 95, 107, 43, 109, 97, 107, 56, 29, 28, 85, 56, 28, 55, 85, 56, 29, 28, 55, 56, 90, 29, 85, 56, 100, 90, 85, 56, 100, 55, 85, 56, 104, 100, 55, 56, 104, 100, 90, 56, 107, 30, 94, 56, 29, 30, 94, 56, 90, 107, 94, 56, 90, 29, 94, 56, 57, 107, 30, 56, 57, 29, 30, 56, 104, 57, 107, 56, 104, 90, 107, 117, 116, 118, 53, 117, 52, 53, 50, 117, 118, 53, 50, 117, 119, 116, 53, 117, 119, 52, 53, 117, 119, 52, 116, 117, 113, 118, 50, 117, 113, 116, 118, 117, 114, 113, 50, 117, 111, 114, 113, 117, 110, 113, 116, 117, 110, 111, 113, 117, 110, 111, 116, 117, 46, 50, 49, 117, 114, 112, 46, 117, 112, 46, 49, 117, 114, 46, 50, 117, 111, 114, 112, 117, 111, 112, 49, 117, 52, 13, 49, 117, 81, 13, 49, 117, 83, 81, 13, 117, 83, 52, 13, 117, 80, 83, 81, 117, 80, 83, 52, 117, 80, 81, 49, 76, 112, 77, 49, 76, 111, 112, 49, 76, 117, 80, 49, 76, 111, 112, 77, 76, 81, 77, 49, 76, 80, 81, 49, 76, 80, 81, 77, 76, 117, 80, 111, 76, 117, 111, 49, 101, 105, 91, 106, 101, 87, 92, 86, 101, 92, 91, 106, 101, 92, 102, 106, 101, 92, 91, 86, 101, 87, 92, 102, 101, 91, 85, 86, 101, 100, 90, 85, 101, 90, 105, 91, 101, 90, 91, 85, 101, 100, 85, 86, 101, 104, 90, 105, 101, 104, 100, 90, 101, 105, 46, 106, 101, 102, 46, 106, 101, 112, 102, 46, 101, 114, 112, 46, 101, 114, 105, 46, 101, 111, 114, 112, 101, 114, 113, 105, 101, 104, 113, 105, 101, 110, 111, 113, 101, 111, 114, 113, 101, 104, 100, 113, 101, 110, 100, 113, 101, 110, 111, 100, 101, 112, 102, 77, 101, 111, 112, 77, 101, 76, 71, 77, 101, 72, 102, 77, 101, 71, 72, 77, 101, 76, 71, 111, 101, 76, 111, 77, 101, 35, 86, 36, 101, 72, 102, 36, 101, 72, 35, 36, 101, 87, 102, 36, 101, 87, 86, 36, 101, 71, 72, 35, 101, 71, 35, 86, 82, 69, 84, 54, 82, 26, 69, 84, 82, 26, 25, 69, 82, 26, 25, 84, 82, 67, 25, 69, 82, 67, 69, 54, 82, 119, 67, 54, 82, 79, 25, 24, 82, 64, 25, 24, 82, 64, 116, 24, 82, 79, 116, 24, 82, 67, 64, 116, 82, 67, 64, 25, 82, 119, 67, 116, 82, 52, 14, 54, 82, 14, 84, 54, 82, 83, 14, 84, 82, 83, 52, 14, 82, 119, 52, 54, 82, 119, 52, 116, 82, 80, 83, 52, 82, 80, 79, 116, 82, 80, 83, 79, 82, 117, 80, 116, 82, 117, 80, 52, 82, 117, 52, 116, 61, 116, 118, 65, 61, 64, 116, 65, 61, 113, 116, 118, 61, 110, 113, 116, 61, 60, 64, 116, 61, 110, 60, 116, 61, 118, 66, 65, 61, 113, 115, 118, 61, 51, 115, 118, 61, 51, 118, 66, 61, 51, 115, 66, 61, 62, 115, 66, 61, 60, 100, 55, 61, 104, 100, 113, 61, 104, 100, 55, 61, 110, 100, 113, 61, 110, 60, 100, 61, 56, 104, 55, 61, 113, 115, 107, 61, 57, 115, 107, 61, 62, 57, 115, 61, 104, 113, 107, 61, 104, 57, 107, 61, 56, 104, 57, 70, 28, 85, 0, 70, 28, 55, 0, 70, 28, 55, 85, 70, 34, 85, 0, 70, 22, 34, 0, 70, 22, 55, 0, 70, 100, 22, 55, 70, 100, 55, 85, 70, 85, 35, 86, 70, 100, 85, 86, 70, 71, 34, 35, 70, 34, 85, 35, 70, 101, 71, 100, 70, 71, 35, 86, 70, 101, 71, 86, 70, 101, 100, 86, 75, 79, 116, 24, 75, 64, 23, 24, 75, 64, 116, 24, 75, 60, 64, 23, 75, 60, 64, 116, 75, 110, 60, 116, 75, 80, 79, 116, 75, 110, 111, 116, 75, 117, 80, 116, 75, 117, 111, 116, 75, 117, 80, 111, 75, 76, 80, 111, 75, 110, 111, 100, 75, 76, 71, 111, 75, 101, 71, 100, 75, 101, 111, 100, 75, 101, 71, 111, 75, 70, 71, 100, 75, 22, 23, 55, 75, 100, 22, 55, 75, 60, 23, 55, 75, 60, 100, 55, 75, 110, 60, 100, 75, 70, 100, 22};
  case 8:
    return {24, 38, 4, 2, 10, 87, 9, 66, 102, 13, 57, 14, 157, 61, 57, 58, 126, 22, 49, 21, 64, 15, 16, 107, 108, 17, 16, 66, 93, 46, 11, 12, 31, 17, 10, 3, 105, 15, 61, 14, 45, 18, 11, 1, 114, 18, 46, 19, 162, 64, 62, 61, 63, 8, 7, 84, 52, 98, 13, 12, 52, 47, 134, 46, 48, 141, 54, 49, 48, 123, 20, 21, 59, 159, 62, 58, 119, 47, 20, 19, 72, 5, 51, 4, 53, 52, 148, 57, 53, 48, 47, 138, 129, 23, 51, 24, 128, 23, 50, 22, 144, 56, 50, 51, 77, 56, 5, 6, 151, 53, 54, 58, 60, 6, 81, 7, 60, 160, 59, 63, 65, 164, 64, 66, 55, 143, 50, 49, 55, 59, 54, 153, 163, 65, 63, 62, 154, 55, 60, 56, 86, 65, 8, 9, 105, 61, 57, 14, 105, 102, 57, 14, 105, 157, 102, 57, 105, 157, 61, 57, 105, 101, 157, 61, 105, 101, 157, 102, 105, 101, 102, 14, 114, 18, 46, 11, 114, 45, 18, 44, 114, 93, 46, 44, 114, 93, 46, 11, 114, 93, 11, 44, 114, 45, 18, 11, 114, 45, 11, 44, 162, 15, 104, 107, 162, 64, 15, 61, 162, 64, 104, 107, 162, 105, 15, 61, 162, 64, 15, 107, 162, 105, 15, 104, 162, 101, 104, 100, 162, 156, 104, 100, 162, 101, 157, 61, 162, 101, 157, 100, 162, 156, 157, 100, 162, 105, 101, 104, 162, 105, 101, 61, 162, 62, 61, 58, 162, 159, 62, 58, 162, 157, 159, 58, 162, 157, 61, 58, 162, 156, 157, 159, 162, 156, 159, 62, 30, 17, 10, 66, 30, 10, 87, 66, 30, 108, 17, 66, 30, 108, 87, 66, 30, 31, 108, 17, 30, 31, 17, 10, 30, 31, 10, 87, 52, 102, 13, 97, 52, 98, 13, 97, 52, 102, 57, 97, 52, 102, 13, 57, 52, 148, 57, 97, 52, 93, 134, 46, 52, 93, 46, 12, 52, 93, 98, 12, 52, 92, 93, 98, 52, 92, 93, 134, 52, 92, 91, 134, 52, 91, 98, 97, 52, 91, 148, 97, 52, 133, 91, 134, 52, 133, 91, 148, 52, 133, 148, 134, 52, 92, 91, 98, 43, 133, 91, 134, 43, 133, 91, 42, 43, 133, 113, 134, 43, 92, 91, 134, 43, 112, 113, 42, 43, 92, 91, 42, 43, 112, 133, 42, 43, 112, 133, 113, 43, 113, 134, 46, 43, 93, 134, 46, 43, 93, 46, 44, 43, 114, 113, 46, 43, 114, 113, 44, 43, 114, 46, 44, 43, 92, 93, 44, 43, 92, 93, 134, 119, 113, 134, 46, 119, 114, 113, 46, 119, 47, 46, 19, 119, 47, 113, 134, 119, 47, 134, 46, 119, 114, 46, 19, 119, 114, 113, 19, 118, 48, 123, 138, 118, 48, 47, 138, 118, 48, 123, 20, 118, 48, 47, 20, 118, 119, 47, 20, 118, 119, 123, 20, 118, 47, 113, 134, 118, 47, 134, 138, 118, 133, 134, 138, 118, 133, 113, 134, 118, 112, 133, 113, 118, 112, 133, 138, 118, 119, 47, 113, 118, 119, 112, 113, 147, 102, 57, 97, 147, 157, 102, 57, 147, 101, 157, 102, 147, 101, 102, 97, 147, 148, 157, 57, 147, 148, 57, 97, 147, 96, 148, 97, 147, 96, 101, 97, 147, 96, 101, 157, 53, 133, 134, 138, 53, 133, 148, 134, 53, 47, 134, 138, 53, 133, 148, 138, 53, 52, 47, 134, 53, 52, 148, 134, 164, 64, 16, 66, 164, 108, 16, 107, 164, 64, 16, 107, 164, 108, 16, 66, 164, 106, 108, 66, 164, 106, 108, 107, 164, 106, 64, 107, 122, 121, 126, 125, 122, 126, 125, 49, 122, 121, 125, 140, 122, 141, 121, 140, 122, 143, 125, 140, 122, 141, 49, 140, 122, 143, 125, 49, 122, 143, 49, 140, 122, 126, 49, 21, 122, 123, 126, 21, 122, 48, 141, 49, 122, 48, 123, 21, 122, 48, 123, 141, 122, 48, 49, 21, 132, 91, 90, 42, 132, 133, 91, 42, 132, 41, 90, 111, 132, 41, 90, 42, 132, 41, 111, 42, 132, 112, 133, 42, 132, 112, 133, 111, 132, 112, 111, 42, 132, 96, 148, 97, 132, 91, 90, 97, 132, 91, 148, 97, 132, 96, 90, 97, 132, 133, 91, 148, 132, 147, 133, 148, 132, 147, 96, 90, 132, 147, 96, 148, 129, 37, 38, 4, 129, 37, 24, 38, 129, 51, 24, 4, 129, 24, 38, 4, 129, 72, 51, 4, 129, 72, 51, 37, 129, 72, 37, 4, 128, 126, 22, 125, 128, 126, 125, 49, 128, 143, 50, 49, 128, 126, 22, 49, 128, 50, 22, 49, 128, 143, 50, 125, 128, 143, 125, 49, 144, 71, 37, 36, 144, 127, 37, 36, 144, 129, 127, 37, 144, 127, 71, 36, 144, 72, 71, 37, 144, 72, 71, 51, 144, 72, 51, 37, 144, 129, 51, 37, 144, 23, 50, 51, 144, 128, 127, 50, 144, 129, 23, 51, 144, 129, 23, 127, 144, 128, 23, 50, 144, 128, 23, 127, 77, 144, 56, 51, 77, 56, 5, 51, 77, 72, 5, 51, 77, 72, 71, 51, 77, 72, 5, 71, 77, 144, 56, 71, 77, 144, 71, 51, 151, 137, 141, 54, 151, 137, 141, 138, 151, 48, 141, 54, 151, 48, 141, 138, 151, 53, 48, 138, 151, 53, 48, 54, 151, 133, 148, 138, 151, 137, 133, 138, 151, 147, 133, 148, 151, 132, 137, 133, 151, 53, 148, 138, 151, 132, 147, 133, 151, 132, 147, 137, 151, 147, 157, 58, 151, 148, 157, 57, 151, 157, 57, 58, 151, 147, 148, 157, 151, 53, 148, 57, 151, 53, 57, 58, 60, 81, 7, 84, 60, 80, 81, 84, 60, 63, 7, 84, 60, 80, 63, 84, 60, 160, 80, 63, 60, 160, 80, 81, 161, 156, 155, 100, 161, 156, 104, 100, 161, 99, 104, 100, 161, 99, 155, 100, 161, 103, 99, 104, 161, 162, 156, 104, 161, 162, 156, 155, 161, 78, 99, 155, 161, 28, 103, 99, 161, 27, 28, 78, 161, 27, 78, 99, 161, 27, 28, 99, 161, 82, 28, 78, 161, 82, 28, 103, 161, 82, 78, 155, 161, 64, 104, 107, 161, 103, 104, 107, 161, 106, 64, 107, 161, 106, 103, 107, 161, 162, 64, 104, 161, 164, 162, 64, 161, 164, 106, 103, 161, 164, 106, 64, 117, 112, 133, 111, 117, 112, 133, 138, 117, 118, 112, 138, 117, 137, 133, 138, 117, 132, 133, 111, 117, 118, 112, 111, 117, 132, 137, 133, 117, 132, 137, 111, 117, 48, 123, 138, 117, 137, 141, 138, 117, 48, 141, 138, 117, 48, 123, 141, 117, 118, 123, 138, 117, 122, 118, 123, 117, 122, 123, 141, 117, 122, 137, 141, 136, 121, 116, 140, 136, 141, 121, 140, 136, 117, 122, 137, 136, 137, 141, 140, 136, 122, 141, 121, 136, 122, 137, 141, 136, 122, 121, 116, 136, 117, 137, 116, 136, 117, 122, 116, 55, 54, 153, 140, 55, 141, 49, 140, 55, 141, 54, 49, 55, 141, 54, 140, 55, 143, 49, 140, 55, 143, 153, 140, 163, 160, 59, 158, 163, 59, 63, 62, 163, 59, 159, 158, 163, 59, 159, 62, 163, 160, 59, 63, 163, 160, 80, 63, 163, 80, 63, 84, 163, 160, 80, 158, 163, 79, 80, 158, 163, 79, 80, 84, 163, 83, 79, 84, 163, 83, 63, 84, 163, 155, 159, 158, 163, 156, 159, 62, 163, 156, 155, 159, 163, 162, 156, 155, 163, 162, 156, 62, 163, 161, 162, 155, 163, 78, 155, 158, 163, 82, 78, 155, 163, 79, 82, 78, 163, 79, 78, 158, 163, 83, 79, 82, 163, 161, 83, 82, 163, 161, 82, 155, 163, 164, 162, 64, 163, 65, 161, 164, 163, 162, 64, 62, 163, 161, 164, 162, 163, 65, 164, 64, 163, 65, 64, 62, 85, 106, 103, 29, 85, 82, 28, 29, 85, 82, 28, 103, 85, 28, 103, 29, 85, 161, 164, 103, 85, 164, 106, 103, 85, 161, 164, 82, 85, 161, 82, 103, 85, 108, 87, 66, 85, 106, 108, 66, 85, 106, 108, 29, 85, 30, 108, 87, 85, 30, 29, 87, 85, 30, 108, 29, 85, 164, 106, 66, 85, 164, 87, 66, 124, 121, 125, 140, 124, 120, 121, 140, 124, 143, 125, 140, 124, 139, 120, 140, 124, 139, 143, 140, 124, 142, 139, 143, 124, 143, 50, 125, 124, 128, 127, 50, 124, 128, 50, 125, 124, 144, 127, 50, 124, 144, 143, 50, 124, 142, 144, 143, 124, 127, 71, 36, 124, 144, 70, 71, 124, 70, 71, 36, 124, 144, 127, 71, 124, 35, 70, 36, 124, 142, 144, 70, 124, 34, 120, 69, 124, 70, 34, 69, 124, 70, 139, 69, 124, 139, 120, 69, 124, 35, 70, 34, 124, 142, 70, 139, 146, 101, 157, 100, 146, 101, 95, 100, 146, 156, 157, 100, 146, 156, 95, 100, 146, 96, 101, 157, 146, 96, 101, 95, 146, 147, 96, 157, 146, 147, 96, 95, 146, 147, 156, 157, 135, 120, 115, 33, 135, 34, 120, 33, 135, 34, 120, 69, 135, 34, 69, 33, 135, 139, 120, 69, 135, 68, 115, 33, 135, 68, 139, 69, 135, 68, 69, 33, 135, 121, 115, 116, 135, 120, 121, 140, 135, 121, 116, 140, 135, 120, 121, 115, 135, 139, 120, 140, 135, 136, 139, 140, 135, 136, 115, 116, 135, 136, 116, 140, 154, 76, 81, 75, 154, 80, 81, 75, 154, 80, 152, 75, 154, 160, 80, 81, 154, 160, 80, 152, 154, 60, 160, 81, 154, 76, 6, 81, 154, 77, 56, 6, 154, 60, 6, 81, 154, 77, 76, 6, 154, 60, 56, 6, 154, 76, 69, 75, 154, 152, 69, 75, 154, 139, 152, 69, 154, 70, 139, 69, 154, 70, 76, 69, 154, 142, 70, 139, 154, 70, 76, 71, 154, 144, 70, 71, 154, 144, 56, 71, 154, 77, 76, 71, 154, 77, 56, 71, 154, 142, 144, 70, 154, 142, 144, 143, 154, 144, 143, 50, 154, 144, 56, 50, 154, 55, 143, 50, 154, 55, 56, 50, 154, 152, 153, 140, 154, 143, 153, 140, 154, 139, 143, 140, 154, 139, 152, 140, 154, 142, 139, 143, 154, 55, 143, 153, 154, 59, 152, 153, 154, 60, 160, 59, 154, 55, 59, 153, 154, 160, 59, 152, 154, 55, 60, 59, 86, 83, 63, 84, 86, 63, 8, 84, 86, 65, 63, 8, 86, 163, 65, 63, 86, 163, 83, 63, 86, 164, 87, 66, 86, 65, 9, 66, 86, 87, 9, 66, 86, 65, 164, 66, 86, 85, 164, 87, 86, 161, 164, 82, 86, 161, 83, 82, 86, 65, 161, 164, 86, 163, 161, 83, 86, 163, 65, 161, 86, 85, 164, 82, 150, 59, 153, 159, 150, 59, 54, 153, 150, 59, 159, 58, 150, 59, 54, 58, 150, 151, 54, 58, 150, 141, 54, 140, 150, 137, 141, 140, 150, 137, 141, 54, 150, 54, 153, 140, 150, 151, 137, 54, 150, 136, 153, 140, 150, 136, 151, 137, 150, 136, 137, 140, 150, 156, 157, 159, 150, 147, 156, 157, 150, 147, 157, 58, 150, 157, 159, 58, 150, 151, 147, 58, 150, 146, 147, 156, 150, 146, 151, 147, 150, 146, 156, 159, 131, 110, 111, 40, 131, 41, 90, 40, 131, 41, 90, 111, 131, 41, 111, 40, 131, 89, 110, 40, 131, 89, 90, 40, 131, 132, 90, 111, 131, 110, 111, 116, 131, 132, 137, 111, 131, 117, 137, 116, 131, 117, 111, 116, 131, 117, 137, 111, 131, 136, 110, 116, 131, 136, 137, 116, 131, 89, 90, 95, 131, 147, 96, 90, 131, 147, 96, 95, 131, 96, 90, 95, 131, 132, 147, 90, 131, 146, 147, 95, 131, 146, 89, 95, 131, 132, 147, 137, 131, 136, 151, 137, 131, 150, 146, 151, 131, 151, 147, 137, 131, 146, 151, 147, 131, 150, 146, 136, 131, 150, 136, 151, 149, 79, 80, 158, 149, 80, 152, 75, 149, 160, 80, 158, 149, 80, 74, 75, 149, 160, 80, 152, 149, 79, 74, 158, 149, 79, 80, 74, 149, 74, 69, 75, 149, 139, 152, 69, 149, 152, 69, 75, 149, 68, 139, 69, 149, 68, 74, 69, 149, 135, 68, 74, 149, 135, 68, 139, 149, 59, 159, 158, 149, 59, 152, 153, 149, 59, 153, 159, 149, 160, 59, 152, 149, 160, 59, 158, 149, 150, 159, 158, 149, 150, 153, 159, 149, 139, 152, 140, 149, 136, 139, 140, 149, 136, 153, 140, 149, 152, 153, 140, 149, 135, 136, 139, 149, 150, 135, 136, 149, 150, 136, 153, 145, 27, 26, 99, 145, 78, 99, 155, 145, 26, 78, 73, 145, 26, 73, 94, 145, 26, 99, 94, 145, 27, 26, 78, 145, 27, 78, 99, 145, 95, 100, 94, 145, 156, 155, 100, 145, 156, 95, 100, 145, 99, 100, 94, 145, 99, 155, 100, 145, 146, 156, 95, 145, 146, 95, 94, 145, 155, 159, 158, 145, 146, 156, 159, 145, 156, 155, 159, 145, 150, 146, 159, 145, 150, 159, 158, 145, 149, 150, 158, 145, 149, 150, 146, 145, 78, 155, 158, 145, 74, 78, 73, 145, 79, 74, 158, 145, 79, 74, 78, 145, 79, 78, 158, 145, 149, 74, 158, 145, 149, 74, 73, 130, 39, 109, 0, 130, 25, 67, 0, 130, 32, 109, 0, 130, 25, 88, 0, 130, 32, 67, 0, 130, 39, 88, 0, 130, 109, 115, 33, 130, 32, 109, 33, 130, 32, 67, 33, 130, 68, 115, 33, 130, 68, 67, 33, 130, 135, 68, 115, 130, 109, 110, 40, 130, 89, 110, 40, 130, 89, 40, 88, 130, 39, 40, 88, 130, 39, 109, 40, 130, 131, 89, 110, 130, 110, 115, 116, 130, 136, 115, 116, 130, 136, 110, 116, 130, 109, 110, 115, 130, 135, 136, 115, 130, 131, 136, 110, 130, 95, 88, 94, 130, 146, 95, 94, 130, 146, 89, 95, 130, 89, 95, 88, 130, 131, 146, 89, 130, 145, 146, 94, 130, 150, 146, 136, 130, 150, 135, 136, 130, 131, 146, 136, 130, 149, 150, 135, 130, 149, 150, 146, 130, 145, 149, 146, 130, 26, 88, 94, 130, 26, 73, 94, 130, 26, 73, 67, 130, 25, 26, 67, 130, 25, 26, 88, 130, 145, 73, 94, 130, 74, 73, 67, 130, 135, 68, 74, 130, 68, 74, 67, 130, 149, 135, 74, 130, 149, 74, 73, 130, 145, 149, 73};
    
  default:
    throw std::invalid_argument("MeshRefTets: unsupported P = " +
                                std::to_string(P));
  }
}

template <typename T>
void MeshToBlueprintMesh(std::shared_ptr<const fem::FunctionSpace<T>> V, conduit::Node &out) {
  // Topology: get connectivity array
  auto topology =  V->mesh()->topology();
  const int tdim = topology->dim();
  std::vector<int> conn = topology->connectivity(tdim, 0)->array();
  std::cout << "local cells in insitu output: " << conn.size() / 4 << std::endl;

  // Geometry: get coordinates
  std::span<const T> coords = V->mesh()->geometry().x();
  const int n_coords = coords.size() / 3;
  std::vector<T> X(n_coords), Y(n_coords), Z(n_coords);
  for (int i = 0; i < n_coords; ++i) {
    X[i] = coords[3 * i];
    Y[i] = coords[3 * i + 1];
    Z[i] = coords[3 * i + 2];
  }

  // Fill Conduit node for Blueprint mesh
  out["coordsets/coords/type"] = "explicit";
  out["coordsets/coords/values/x"].set(X.data(), n_coords);
  out["coordsets/coords/values/y"].set(Y.data(), n_coords);
  out["coordsets/coords/values/z"].set(Z.data(), n_coords);

  out["topologies/mesh/type"] = "unstructured";
  out["topologies/mesh/coordset"] = "coords";
  auto it = dolfinx_celltype_to_blueprint.find(topology->cell_type());
  if (it == dolfinx_celltype_to_blueprint.end())
    throw std::runtime_error(
        "Unknown cell type in dolfinx_celltype_to_blueprint mapping");
  out["topologies/mesh/elements/shape"] = it->second;
  out["topologies/mesh/elements/connectivity"].set(conn.data(), conn.size());

  Node verify_info;
  if(!blueprint::mesh::verify(out, verify_info))
  {
      std::cout << "Mesh Verify failed!" << std::endl;
      std::cout << verify_info.to_yaml() << std::endl;
  } else {
      std::cout << "Mesh verify success!" << std::endl;
  }
}

template <typename T>
void MeshToBlueprintMesh(std::shared_ptr<fem::FunctionSpace<T>> V, const int P,
                         conduit::Node &out) {
  // Shape: (num_dofs, 3)
  std::vector<T> coords = V->tabulate_dof_coordinates(false);
  const int n_coords = coords.size() / 3;
  std::vector<T> X(n_coords), Y(n_coords), Z(n_coords);
  for (int i = 0; i < n_coords; ++i) {
    X[i] = coords[3 * i];
    Y[i] = coords[3 * i + 1];
    Z[i] = coords[3 * i + 2];
  }

  // Fill Conduit node for Blueprint mesh
  out["coordsets/coords/type"] = "explicit";
  out["coordsets/coords/values/x"].set(X.data(), n_coords);
  out["coordsets/coords/values/y"].set(Y.data(), n_coords);
  out["coordsets/coords/values/z"].set(Z.data(), n_coords);

  out["topologies/mesh/type"] = "unstructured";
  out["topologies/mesh/coordset"] = "coords";

  std::shared_ptr<const mesh::Topology> topology = V->mesh()->topology();
  auto it = dolfinx_celltype_to_blueprint.find(topology->cell_type());
  if (it == dolfinx_celltype_to_blueprint.end())
    throw std::runtime_error(
        "Unknown cell type in dolfinx_celltype_to_blueprint mapping");
  out["topologies/mesh/elements/shape"] = it->second;

  // Connectivity
  const int tdim = topology->dim();
  const int num_local_cells = topology->index_map(tdim)->size_local();

  // Ref  connectivity
  std::vector<int> local_connectivity;
  if (tdim == 2) {
    local_connectivity = MeshRefTriangle(P);
  } else {
    local_connectivity = MeshRefTetrahedron(P);
  }
  const int N = local_connectivity.size();
  std::vector<int> global_connectivity(N * num_local_cells);

  std::shared_ptr<const fem::DofMap> dofmap = V->dofmap();

  for (int i = 0; i < num_local_cells; ++i) {
    std::span<const std::int32_t> global_dofs = dofmap->cell_dofs(i);
    for (int k = 0; k < N; ++k) {
      global_connectivity[i * N + k] = global_dofs[local_connectivity[k]];
    }
  }

  out["topologies/mesh/elements/connectivity"].set(global_connectivity.data(),
                                                   global_connectivity.size());

  Node verify_info;
  if(!blueprint::mesh::verify(out, verify_info))
  {
      std::cout << "Mesh Verify failed!" << std::endl;
      std::cout << verify_info.to_yaml() << std::endl;
  } else {
      std::cout << "Mesh verify success!" << std::endl;
  }
}

template <typename T>
void DG0FunctionToBlueprintField(std::shared_ptr<fem::Function<T>> f,
                                 conduit::Node &out,
                                 const std::string &field_name) {
  std::span<T> values = f->x()->mutable_array();
  out["fields"][field_name]["association"] = "element"; // DG
  out["fields"][field_name]["topology"] = "mesh";
  out["fields"][field_name]["values"].set_external(values.data(),
                                                   values.size());
}

template <typename T>
void CG1FunctionToBlueprintField(std::shared_ptr<fem::Function<T>> f,
                                 conduit::Node &out,
                                 const std::string &field_name) {
  std::span<T> values = f->x()->mutable_array();
  out["fields"][field_name]["association"] = "vertex"; // CG1
  out["fields"][field_name]["topology"] = "mesh";
  out["fields"][field_name]["values"].set_external(values.data(),
                                                   values.size());
}


template <typename T>
void FunctionToBlueprintField(std::shared_ptr<fem::Function<T>> f,
                              conduit::Node &out,
                              const std::string &field_name) {
  std::span<T> values = f->x()->mutable_array();
  out["fields"][field_name]["association"] = "vertex";
  out["fields"][field_name]["topology"] = "mesh";
  out["fields"][field_name]["values"].set_external(values.data(),
                                                   values.size());
  //   out["fields"][field_name]["values"].set(values.data(), values.size());
}

} // namespace ascent_h
